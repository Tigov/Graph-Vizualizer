import React, { createElement } from 'react';
import axios from 'axios'
import './App.css';
import { Button, FormControl, FormControlLabel, FormLabel, Paper, Radio, RadioGroup, TextField, Tooltip } from '@mui/material';
import InnerHTML from 'dangerously-set-html-content';
import * as vis from 'vis-network';

//Citations: 
// https://www.npmjs.com/package/dangerously-set-html-content for InnerHTML element

//To start, CD into graph_visualizer and run "npm start". So long as you have npm, React, Typescript, and other libraries installed ("npm i"), it should run
//npm install typescript
//npm install axios
//npm install react
function App() {
  //---------------- Variables set by users, includes final graph graphRes -----------
  const [graphRes, setGraphRes] = React.useState<string>('');
  const [edgeListValue, setEdgeListValue] = React.useState<string>("");
  const [weightedEdgeListValue, setWeightedEdgeListValue] = React.useState<string>("");
  const [weightedValue, setWeightedValue] = React.useState<string>("False");
  const [directedValue, setDirectedValue] = React.useState<string>("False");
  const [graphTypeValue, setGraphTypeValue] = React.useState<string>("bfs");
  const [randomValue, setRandomValue] = React.useState<string>("False");
  const [numEdges, setNumEdges] = React.useState<number>(0);
  const [numVertices, setNumVertices] = React.useState<number>(0);
  const [startingVertex, setStartingVertex] = React.useState<number>(0);
  //----------------------------------------------------------------------------------

  //---------------- Event Handlers for variables----------------------
  //These update the state for the variables above
  const edgeListChange = (event:any) => {
    setEdgeListValue(event.target.value);
  };
  const weightedEdgeListChange = (event:any) => {
    setWeightedEdgeListValue(event.target.value);
  }
  const weightedChange = (event:any) => {
    setWeightedValue(event.target.value);
  }
  const directedChange = (event:any) => {
    setDirectedValue(event.target.value);
  }
  const graphTypeChange = (event:any) => {
    setGraphTypeValue(event.target.value);
  }
  const randomValueChange = (event:any) => {
    setRandomValue(event.target.value);
  }
  const numEdgesChange = (event:any) => {
    setNumEdges(event.target.value);
  }
  const numVerticesChange = (event:any) => {
    setNumVertices(event.target.value);
  }
  const startingVertexChange = (event:any) => {
    setStartingVertex(event.target.value);
  }
  //-------------------------------------------------------------
  function fixFormatting():any { //helper function to let users use edge-list format. Currently makes mistakes on first submission for newline characters
    var tempEdgeList = edgeListValue;
    tempEdgeList = tempEdgeList.replace(/\n/g, ' ');
    tempEdgeList = tempEdgeList.split('\n').join(' ');
    tempEdgeList = tempEdgeList.split(" ").join('+');

    setEdgeListValue(tempEdgeList);

    var tempWeightedList = weightedEdgeListValue;
    tempWeightedList = tempWeightedList.split(' ').join('+');
    tempWeightedList = tempWeightedList.replace(/\n/g, ' ');
    tempWeightedList = tempWeightedList.split('\n').join('+');
    setWeightedEdgeListValue(tempWeightedList);
  }
  //axios request to send data to backend and return graph response, expressed as HTML elements in one string
  const postGraph = async () => {
    fixFormatting();

    //manually create url that the backend Python API uses. It's a very long url
    var url = "http://127.0.0.1:8000/algoFinal?numOfVert=" + numVertices + "&numOfEdges=" + numEdges + "&startingVertex=" + startingVertex + "&random=" + randomValue + "&directed=" + directedValue + "&weighted=" + weightedValue + "&edgeListFormat=" + edgeListValue + "&actualAlgo=" + graphTypeValue + "&weightedEdgeListFormat=" + weightedEdgeListValue;
    const res = await axios.get(
      url, { params: {
          edgeList: edgeListValue,
          weighted: weightedValue,
          directed: directedValue,
          graphType: graphTypeValue,
          random: randomValue,
          numEdges: numEdges,
          numVertices: numVertices,
          weightedEdgeListValue: weightedEdgeListValue
        },
        headers: {
          "content-type": "application/json",
        } }
    );
    await new Promise(f => setTimeout(f, 500)); //wait statement to wait until res returns graph. Must test if actually necessary for now
    var temp = JSON.parse(res.data).htmlCode;
    temp = temp.replace('vis.',''); //For some reason, it likes one of these two lines. But only the one that's not being used. So we use both just in case.
    temp = temp.toString().replace('vis.',''); //required line. pyvis is a python library and generates the response we send back to front-end. This autogenerated html uses vis properties and methods within pyvis, that our front-end doesn't recognize. On the front-end, I have visjs installed which should recognize it, but still has no idea what vis is. So we just remove it and everything works.
    setGraphRes(temp); //store new value from the modified response in graphRes for output in HTML later.
  }
  return (
    <div style={{whiteSpace:"nowrap"}}>
      <Paper>
        <div style={{display:"inline-block", marginLeft:"15px", marginRight:"15px"}}>
          <FormControl>
            <FormLabel id="radio_graphType">Graph Type</FormLabel> 
            <RadioGroup value={graphTypeValue} onChange={graphTypeChange} aria-labelledby="radio_graphType" defaultValue="dfs" name="radioGraph">
              <FormControlLabel value="dfs" control={<Radio />} label="Depth First Search"/>
              <FormControlLabel value="bfs" control={<Radio />} label="Breadth First Search" />
              <FormControlLabel value="dijk" control={<Radio />} label="Dijkstra's Algorithm" />
            </RadioGroup>
          </FormControl>
        </div>
        <div style={{display:"inline-block", marginLeft:"15px", marginRight:"15px"}}>
          <FormControl>
            <FormLabel id="radio_directedType">Directed/Undirected</FormLabel>
            <RadioGroup value={directedValue} onChange={directedChange} aria-labelledby="radio_directedType" defaultValue="True" name="radioDirected">
              <FormControlLabel value="True" control={<Radio />} label="Directed" />
              <FormControlLabel value="False" control={<Radio />} label="Undirected" />
            </RadioGroup>
          </FormControl>
        </div>
        <div style={{display:"inline-block", marginLeft:"15px", marginRight:"15px" }}>
          <FormControl>
            <FormLabel id="radio_weightedType">Weighted/Unweighted</FormLabel>
            <RadioGroup value={weightedValue} onChange={weightedChange} aria-labelledby="radio_weightedType" defaultValue="True" name="radioWeighted">
              <FormControlLabel value="True" control={<Radio />} label="Weighted" />
              <FormControlLabel value="False" control={<Radio />} label="Unweighted" />
            </RadioGroup>
          </FormControl>
        </div>
        <div style={{display:"inline-block", marginLeft:"15px", marginRight:"15px" }}>
          <FormControl>
            <FormLabel id="radio_randomType">Random/Not Random</FormLabel>
            <RadioGroup value={randomValue} onChange={randomValueChange} aria-labelledby="radio_randomType" defaultValue="True" name="radioRandom">
              <FormControlLabel value="True" control={<Radio />} label="Random" />
              <FormControlLabel value="False" control={<Radio />} label="Not Random" />
            </RadioGroup>
          </FormControl>
        </div>
      </Paper>
      <Paper>
        <div style={{display:"inline-block"}}>
          <Tooltip title="Enter each number with no spaces, connected with plus signs. Ex. 0+1+2+3">
            <TextField required style={{margin:"15px"}} label="Edge List Values" value={edgeListValue} onChange={edgeListChange} multiline />
          </Tooltip>
          <Tooltip title="Enter each number with no spaces, connected with plus signs. Ex. 0+1+2+3">
            <TextField required style={{margin:"15px"}} label="Weighted Edge List Values" value={weightedEdgeListValue} onChange={weightedEdgeListChange} multiline />
          </Tooltip>
          <TextField InputProps={{inputProps:{min:0, max:25}}} type="number" required style={{margin:"15px", width:"200px"}} label="Number of Vertices" value={numVertices} onChange={numVerticesChange} />
        </div>
        <div style={{display:"inline-block"}}>
          <TextField InputProps={{inputProps:{min:0, max:25}}} type="number" required style={{margin:"15px", width:"200px"}} label="Number of Edges" value={numEdges} onChange={numEdgesChange} />
        </div>
        <div style={{display:"inline-block"}}>
          <TextField type="number" style={{margin: "15px",width: "200px"}} label="Starting Vertex" value={startingVertex} onChange={startingVertexChange} />
        </div>
      </Paper>
      <Paper>
        <div style={{display:"inline-block"}}>
          <Button onClick={postGraph}>Submit</Button>
        </div>
      </Paper>
      <div id="place"></div>
        {!graphRes ? <div></div> : <InnerHTML style={{minHeight:"250px"}} html={graphRes} /> /*Because we have a complicated HTML element coming back from API which includes script tags, and dangerouslySetInnerHTML ignores these scripts, this was the best way to get our graph to show and to use inside functionality */ } 
    </div>
  );
}

export default App;